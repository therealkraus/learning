# THIS FILE IS NOT IN PUBLIC DOMAIN, NOR RELEASED UNDER ANY
# FREE SOFTWARE LICENSE SUCH AS GPL, MIT OR CREATIVE COMMONS.

# This file may not be distributed without the express written
# permission by Ilkka Kokkarinen, as this file is private
# intellectual property of Ilkka Kokkarinen. A small number of
# individual functions may be distributed during lab sessions
# of Python programming courses built on the material, but only
# among the official student body of that course.

from fractions import Fraction
from collections import deque
from bisect import bisect_left
from functools import lru_cache
from itertools import combinations, chain, islice, count, product

# The lists __fibs and __primes will grow as some functions
# below are executed and need bigger Fibonacci numbers and prime
# numbers to be able to handle their larger argument values.

__fibs = [
    █████████████████████████████
]

__primes = [
    ███████████████████████████████████████████████████████████████████████████████████████████████████
]

# The following lists of things will remain fixed throughout the execution.

__faces = {14: 'A', 13: 'K', 12: 'Q', 11: 'J'}

__suits = ['spades', 'hearts', 'diamonds', 'clubs']

__losers = {
    ██████████████████████████████████████████████████████████████████
    █████████████████████████████████████████████████████████████████
    ████████████████████████████████████████████████
}

__bridge_ranks = {
    ████████████████████████████████████████████████████████████████████████████████████████
    █████████████████████████████████████████████████████████
}

__gin_ranks = {
    ███████████████████████████████████████████████████████████████████████████████████████
    █████████████████████████████████████████████████████████
}

__morse = {
    ████████████████████████████████████████████████████████████████████████████████████████████████
    ███████████████████████████████████████████████████████████████████████████████████████████████
    ████████████████████████████████████████████████████████████████████████████████████████████████
    ████████████████████████
    █

__morse_r = {__morse[k]: k for k in __morse}

# The actual solution functions. These are not in any particular order.

__add_cache = dict()

def addition_chain(n, brauer=False):
    █████████
        ████████████████████████
    ██████████████
        ████████████████████████████████████████
            ████████████████████████████
        █████
            ████████████████████████████████
    █████
        ██████████

    ███████████████████
        █████████████
        █████████████████████████
        █████████
        █████████████
            ███████████████████████
        █████████████████████████████
            ████████████
        █████████████
            █████████████████
            █████████████████████████████████████████
                █████████████████████████
                    ████████████
                ████████
            ███████████
        ███████████████████
            ███████████████
            ██████████████
            ███████████
        █████
            ██████████████████████████████
            ██████████████████████████████████████████████
                █████
                ████████████████████████████████████████████
                    █████████████████████████
                    █████████████████████████████████
                        ██████████████
                        █████████████████
                        ██████████████████
                            ███████████
                        ███████████
                    ██████
                ████████████████████████

    ███████████████
    █████████████████████
    █████████████


def beklemishev_worm(worm, goal):
    █████
    ███████████████████████████
        ██████████████████████
        ███████████████
        ███████████████
            ████████████████
        █████
            █████████████████
            █████████████████████████████████
                ██████
            ████████████████████████████████████
            ██████████████████████████████████
        ██████
    ████████


def count_deadwood(hand):
    ███████████████████████████████████████████████████████████████████
    ████████████████████
    ████████████████████
    █████████████████████████
        ████████████████████████████████████████████████
    ██████████████████

    ████████████████████████████████████
        █████████████████████
        ████████████████████████
            ██████████
        █████████████
            ███████████████████████████████████████████████████████████████████
                ████████████████████████
                    ████████████████████
                ████████
            █████
                ██████████
        ████████████████████████
        ██████████████████████
        ██████████

        # Join an existing run
        ██████████████
            ██████████████████████
            █████████████████████████████████████
                ██████████████████████
                ███████████████████████████████████████████████████
                ███████
        # Start a new run
        █████████████████████████████████████████████████████████████
            ███████████████████████████
            ███████████████████████████████████████████████████
            ██████████
        # Join an existing set
        ██████████████
            ██████████████████████
            █████████████████
                ██████████████████████
                ███████████████████████████████████████████████████
                ███████
        # Start a new set
        █████████████████████████
            ███████████████████████████
            █████████████████████████████████████████████████████
            ██████████
        # Leave as deadwood
        █████████████████████████████████
        █████████████████████████████████████████████████████████████████████

        ██████████████████████
        ███████████

    ██████████████████████████████████████


def count_sevens(n):
    ██████████
        ████████████████████████
    ███████████
    ███████████████████████████████
    █████████████████████████████████████████████████████████
    ██████████████████
    ███████████████████████████████
    ████████████████████████████████████████████████████████


def count_morse(message, letters):
    ██████████████████████████
    ████████████████████
        █████████████████████
            ████████
        █████████
        █████████████████████████████
            ███████████████████
            ██████████████████████████████████
                ██████████████████████████████████████████████████
        ████████████
    ██████████████████████████


def othello_moves(othello, desdemona):
    ███████████████████████████████████████████
    ████████████████████████████████████████████████████████████████████████████████████████
    ██████████████████
        ██████████████████
            █████████████████████████████████████████
                ███████████
                █████████████████████
                    ███████████████████████████████
                    █████████████████████████████████████████████████████
                        █████████████████████████████████████████
                    ██████████████████████████████████████████████████████████████████
                        ██████████████████
                ███████████████
                    █████████████████████████████
    ████████████████████████████████████████████
    ████████████


__liang = dict()

def liang_hyphenation(word, patterns):
    ███████████████████████
    █████████████████████
        ██████████████████
            ██████████████████████████████████████████████████████████████████
            ███████████████
    █████████████
    ██████████████████████████████
    ██████████████████
        █████████████████████
            █████████████████
            ██████████████████
                ██████████████████████████
                █████████████
                    ██████████████████████████████████████
                        ████████
                    █████
                        ██████████████████████████████████████
    █████████████████████████████
    ██████████████████████████████
        ████████████████████████████████████████████████████████
            █████████████
        ███████████
    █████████████


def ordinal_transform(seed, i):
    ███████████████████████████████████████
    ████████████████████████████████████
        ██████████████████████████████████████
        ███████████████████████████████████████
        ███████████████████████████
            ███████████
            ████████████████████████████
            ███████████████████████
        ███████████████
        █████████████
    ███████████████
    ██████████████


def staircase(digits):
    ███████████████

    █████████████████████████
    ███████████████████████
        ██████████
            ████████
        ███████████████
        ████████████████████████████
        ████████████████████████████████████████████████████████████████████████
        █████████████████████████████████
            ██████
        ██████████████████████████
        ███████████████████████

    ████████████████████


def both_ways(text):
    ████████████
    ██████████████████████████████
        ████████████
            ████████████████
        █████
            ████████████
    █████
    █████████████
        █████████████████
        ██████████████████
        ██████████
            ██████████████████████
                ████████████████████████████████████████
                    █████
                ██████████████████████████████
                    ████████████████
                    ████████████████
                    ███████████████
                        █████
                        ███████████████████████████████████
                            ███████████████████████
                        █████████████
                    █████
                        █████
    ████████


def __gcd(a, b):
    ████████████
        ███████████████
    ████████


def __strokes_needed(hole, c1, c2, best):
    # If we can use just the higher club, that is the optimal solution.
    ██████████████████
        █████████████████
    # If we can use just the lower club, improve the solution for now.
    ██████████████████
        ████████████████████████████
    # Positive c1, positive c2.
    █████████████████
    ███████████████
        █████████████████████████
        ████████████████████
            ███████████████████
            █████████████████████████████
            █████
        █████████
    # Positive c1, negative c2.
    █████████████████████
    ██████████████████
        ███████████████████████
        ██████████████████
            █████████████████
            █████████████████████████████
            █████
        █████████
    # Non-positive c1, positive c2.
    █████████████████████
    ██████████████████
        ███████████████████████
        ██████████████████
            █████████████████
            █████████████████████████████
            █████
        █████████
    ███████████


def best_clubs(holes):
    ███████████████████████████████████████████████████
    ███████████████████
        █████████████████
        ██████████████████████████████████
            █████████████████████████████████
            ██████████████████
                ██████████████████████████████████████████████████████████
                █████████████████
                    █████
                ███████████
            █████
                ████████████
        ███████████████
            ███████
        █████
            ██████████████████
    ███████████


def illuminate_all(lights):
    █████████████████

    █████████████████████████
    ██████████████████████████
        █████████████
            ██████████████
        █████████████
            ████████████████████████████████
        ██████████
        ████████████████████████████████████████████████
            █████████████████████████████████████████████████
        ████████████████████████████████████
        ███████████████████████
    ████████████████████████████


def verify_betweenness(perm, constraints):
    █████████████
    ███████████████████████████
    ██████████████████████████████
        ██████████
    █████████████████████████████
        ███████████████████████████████████
        █████████████████████████████████████
            ████████████
    ███████████


def stepping_stones(n, ones):
    █████████████████████████████████████████████████████████████████████████████
    ███████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████
    ██████████████████████████████████████
    █████████████████████████████████████████████████████████████

    ███████████████████
        █████████████████████████████████████████████████████████████████
        ███████████████████
        █████████████
        █████████████████████
            ███████████████████
            ██████████████████████████████████████████████████████
                ███████████████████
                ██████████████
                    ███████████████████
                    █████████████████████████████
                    ████████████████████████████
                    ███████████████████████████████████
                █████
                    # Treat a cell with an impossibly large value as having already been filled.
                    █████████████████████
                    ████████████████████████████████████
        ███████████████

    ███████████████████████████████

    ███████████████████
        ████████████████████████████████
        ██████████
        ████████████████████████████████
            ████████████████████
                █████████████████████████
                █████████████████████
                ██████████████████████████████████
                ███████████████████████
                    █████████████████████████████████████████
                ████████████████████
                ████████████████████████████████████
                    █████████
                        ███████████████████████████████
                    █████
                        ██████████████████████
                    ██████████████████████████
                    ███████████████████
                ████████████
        ███████████

    ███████████████████
        ██████████████
    █████████████████


def laser_aliens(n, aliens):
    ██████████████████████████████████████
    ██████████████████████████████████████
    █████████████████████████
        ████████████████████████
        ████████████████████████
    █████████████████████████████████████████████████████████████████████████████

    ██████████████████████████
        █████████████
            ████████████
        ████████████████████████
            ███████████
        ████████████████████████
        ██████████████████████████████████
            ██████████████████████████████
        ██████████████████████████████████████
            ██████████
            ██████████████████████████████
                ███████████████████████
                    █████████████████
                        ████████████████████
                        ███████████████████████
            █████████████████████████████████████████████████████
                ███████████
            █████████████████████
                █████████████████████
        ████████████████████████████████

    ███████████████████████████
        ████████████████████
            █████████████
    ████████████


def domino_tile(rows):
    ██████████████████████
        ████████
    ████████████████████████████████████████████████████████

    █████████████████████████████████████
        █████████████████
        # Find the first uncovered square starting from (row_idx, col_idx).
        ███████████
            ████████████████
                # Current row has been fully filled, start filling above row.
                ███████████████
                    ████████████████████████████████████████
                        █████████████████████████████████████████
                    █████
                        █████████████████████████████████████
                        ███████████████████████████████████████████
                        █████████████
                █████
                    # The entire room has been filled.
                    ████████
            ██████████████████████████████████████
                ████████████
            █████
                █████
        ██████████
        # Count the ways to complete filling with domino placed horizontally here.
        ███████████████████████████████████████████████████████████
            ████████████████████████████████████████████
        # Count the ways to complete filling with domino placed vertically here.
        ███████████████████████████████████████████████
            ███████████████
            ███████████████████
            █████████████████████
            ██████████████████████████████████████████████
            █████████████████████
            ███████████████████
        # The total number of ways to complete the filling from this position.
        █████████████

    ██████████████████████████████████████████████████████████████████████████████████████████


def cut_into_squares(a, b):
    ██████████
        ████████
    ███████████████████████████
    █████████████████████████████████████


@lru_cache(maxsize=10**5)
def __cut(a, b):
    ████████████
    ████████████████████████████
        ███████████████████████████████████████████████████████████████████████
    ████████████████████████████
        ███████████████████████████████████████████████████████████████████████
    ███████████


def collect_numbers(perm):
    ████████████████████████
    ███████████████████████
    ██████████████████████████████
        ██████████
    ██████████████████████████
        █████████████████████
            ███████████
        █████████████████
    █████████████


def cut_corners(points):
    █████████████████████████████████████████████████
    ████████████████████████████████████████████
    ████████████████████████████████████████
    █████████████████████████████████████
        █████████
        ██████████████████████████████████
            ████████████████████
            ███████████████████████████
                ███████████████████
                █████████████████████████
                ████████████████████████████████
                ████████████████████████████████
                ████████████████████████████████
            ██████

    ███████████████████████████████████████████████████████████████████████████

    █████████████████████████████████████
        █████████████████
        ████████████
            ████████████████████████████████████████████████████
                ██████████████████████████
            ███████████████████
        ██████████████████████████████
            ███████████████████
        ██████████████████
        █████████████████████
            ████████████████
                ███████████████████████████████████████████
            █████████████████
                █████████████████
        ██████████████████████████████████████
            █████████████████████████████████████████████████
                ██████████████
                ███████████████████████████████████████████
                █████████████████
                ██████████████████████████████████
        █████████████████

    ████████████████████████████████████████████████████
    █████████████


def count_corners(points):
    █████████████████████████████████████████████████
    █████████████████████████████████████
        █████████
        ██████████████████████████████████
            ████████████████████
            ███████████████████████████
                ██████████
            ██████
    ████████████


def count_troikas(items):
    ███████████████████████████
    ███████████████████████████████
        ████████████
            ████████████████
        █████
            ████████████
    █████████
    █████████████
        ██████████████████████████████████████
            █████████████████
            ███████████████████████████
                ██████████
    ████████████


def seven_zero(n):
    ██████████████████
    █████████████████
        ██████████████████████████
    █████████████████
        ████████████████████████████
    █████
    █████████████████
        ██████████████
    ███████████████████████████████████


def count_carries(a, b):
    █████████████████████████
    █████████████████████
        ███████████
        ███████████
        ███████████
        ███████████
        █████████████████████████████
        █████████
            ████████████████
    ██████████████████


def first_preceded_by_smaller(items, k=1):
    ██████████████████████████████
        █████████████████
        ██████████████████
            ███████████████████████
                ██████████████████
        ██████████████████████
            ███████████████
    ███████████


# Utility function to compute sorting key for integer n using the digit
# counts as primary key, and the integer itself as the secondary key.

def __digikey(n):
    ███████████
    █████████████████████████████████████████████


# Using that custom key function, standard sort does the job.

def sort_by_digit_count(items):
    █████████████████████████████████████████


def leibniz(heads, pos):
    █████████
    ███████████████
        ███████████
        ██████████████
            ███████████████████████████
        ████████████
    ███████████
    █████████████
        ██████████████████████
    █████████████


def candy_share(candies):
    ███████████████████████████
    ██████████████████████████████████
        ██████████████████████████████████████████████████████████████████
        ███████████████████████████████████████████████████████████████████
        ██████████████████████████████████████████████████████
        ████████████████████████████████████████████████
        █████████████████████████████████████████████████
        ███████████
    █████████████


def __110(a, b, c):  # Rule 110 hardcoded
    ████████████████████████████████████████████████████████████████████████████████


def __110_forward(prev):  # For verification purposes of solutions for reverse_110
    █████████████
    ████████████████████████████
    ██████████████████
        ██████████████████████████████████████████████████████████
    ███████████


def __rec110(prev, curr):
    █████████████
    █████████
        ████████████████████████████████████████████████████
            ███████████
    ██████████████████
        ███████████████████████████████████████████████████
            ███████████
        ██████████████████████████████████████████████████
            ███████████
        █████
            ███████████
    ██████████████████
        ██████████████
        █████████████████████████████
        ██████████████████████
            █████████████
        ██████████
    ███████████


def reverse_110(curr):
    █████████
    █████████████████████████████
    ██████████████████████
        ████████████████████████████████████
    █████████████


def hourglass_flips(glasses, tt):
    ██████████████████████████████████# Big M value to represent "no solution"

    ██████████████████████████████████
        █████████████
            ████████████████
        ████████████████████████████████████
        ██████████████# Can measure t from one hourglass.
            ██████████████████
        # Past the previous hurdle, we know that at least one flip will be needed.
        █████████████████████████# Time before first glass runs out.
        █████████████████████# Impossible with the current hourglasses
            ██████████████████
        # New hourglasses after s minutes have elapsed.
        ███████████████████████████████████████████████████████
        # Which of these hourglasses are currently u/l symmetric?
        ████████████████████████████████
        # Best solution known for the current subproblem.
        █████████████████████████████
        # Try out all subsets of hourglasses to flip.
        ██████████████████████████████████████████████
            # Do not branch on flipping a currently u/l symmetric hourglass.
            ███████████████████████████████████████████████████████
                █████████████████# How many hourglasses are flipped this time.
                # Find the optimal way to measure the remaining time.
                ████████████████████████████████████████████████████████████████████████████████████████
                                          ██████
                                          ████████████████████████████████
                                          ██████
                ██████████████████████
                    ████████████████████████████████████████████
        ██████████████████████

    █████████████████████████████████████████████████
    █████████████████████████████████████


def conjugate_regular(infinitive, subject, tense):
    ███████████
        ██████████████████████████████████████████
        ███████████████████████████████████████████████
        ████████████████████████████████████
    █

    ███████████████████████████████████████

    ████████████████████████████████████████████████████████████████████
                   █████████████████████████████████
    ████████████████████████████████████████████████████████████████████
                   █████████████████████████████████
    ████████████████████████████████████████████████████████████████████
                   ████████████████████████████████

    ███████████████████████████████████████████████████████████████████████
                    ██████████████████████████████████████
    ████████████████████████████████████████████████████████████████████████
                    ███████████████████████████████████████

    ████████████████████████████████████████████████████████
                     ██████████████████████████████████████████
                     ████████████████
    ██████████████████████████████████████████████████████████████████████████
                     ███████████████████████████████████

    ███████████████████████████████████████████████████████████████████
                  █████████████████████████████████

    ██████████
        ████████████████████████████████
        ████████████████████████████████
        ████████████████████████████████
        ██████████████████████████████████
        ██████████████████████████████████
        ██████████████████████████████████
        ████████████████████████████████████
        ████████████████████████████████████
        ████████████████████████████████████
    █

    # Future tense is formed by modifying the infinitive.
    █████████████████████
        █████████████████████████████████████████
    # Present, past and imperfect past tenses are modified from stem.
    █████
        ██████████████████████
        ████████████████████████
        ████████████████████████████████████████████████
    █████████████


def frequency_sort(items):
    ███████████████
    ███████████████
        ████████████████████████████████
    ███████████████████████████████████████████████████████


def extract_increasing(digits):
    █████████████████████████████████████
    ████████████████
        ███████████████████████████████
        ██████████████████████
            ██████████████████████
            ██████████████████████████████
    █████████████


def josephus(n, k):
    ██████████████████████████████████████████
    ████████████
        ███████████████
        ████████████████████████████
        ██████████████
            ██████████████
        █████
            ████████████████████████████████████████████
        ██████
    █████████████


def brussels_choice_step(n, mink, maxk):
    ███████████████████████
    ██████████████████████████████████
        █████████████████████████████
            ███████████████████
                █████
            ████████████████████████████████████████████
            ███████████
            ████████████████████████████████████████████
            ███████████████
                █████████████████████████████████████████████
    █████████████
    █████████████████████


def fibonacci_sum(n):
    # Expand __fibs if necessary.
    █████████████████████
        ██████████████████████████████████████

    # Use binary search to find largest Fibonacci number <= n.
    ██████████████████████████████████████

    # Extract Fibonacci numbers in descending order as they fit.
    ████████████
        ██████████████████
            ████████████████████████
            ██████████████
            ██████
        █████
            ██████
    █████████████


def bridge_hand_shape(hand):
    ████████████████████████████████████████████
    █████████████████████████
        ████████████████████
            ███████████
        ██████████████████████
            ███████████
        ████████████████████████
            █████████████
        █████████████████████
            ██████████
    ████████████████████████████████████████


def hand_shape_distribution(hands):
    ███████████
    ██████████████████
        █████████████████████████████████████████████████████████████
        ██████████████████████████████████████████████████
    █████████████


def reverse_ascending_sublists(items):
    █████████████████████
    ██████████████████████████████
        ██████████████████████████████████████████████████
            ██████████████
        █████
            ██████████████
            ███████████████████
            ██████████
    █████████████


def fractran(n, prog, giveup=1000):
    ██████████████████████████████████████████
    ███████████████████████████
    ██████████████████████████
        ██████████████
            █████████
            ██████████████████████
                ███████████████
                ███████████████
                ████████████████
                █████
        █████
            █████
    █████████████


def collapse_intervals(items):
    █████████████
        █████████
    ██████████████████████████████████
    ██████████████████
        ██████████████████████████████████████
            █████████████████
        █████
            ████████████████████████████████████████
            █████████████
            █████████████
    ████████████████████████████████████████
    █████████████


def __encode_interval(curr, first):
    █████████████████████████████
    █████████████████
        ████████████████████████████████████████████
    █████
        ██████████████████████
    █████████████


def riffle(items, out=True):
    ███████████████████████████████
    ██████████████████
        ███████
            ███████████████████████
            ███████████████████████████
        █████
            ███████████████████████████
            ███████████████████████
    █████████████


def expand_intervals(intervals):
    ███████████
    ██████████████████████
        █████████████████████████████████
            ███████████████████████
            ███████████████████████████████████████████████████████
    █████████████


def nearest_smaller(items):
    ███████████████████████
    ███████████████████████████████
        █████
        ██████████████████████████
            ████████████████████████████████████
            ████████████████████████████████████████
            █████████████████████
            ██████████
                ██████████████
                █████
            ██████
        █████
            █████████████
    ██████████


def __word_match(word, letters):
    ███████
    ██████████████
        █████████████████████
            ████████
            ███████████████████████
                ███████████
    ████████████


def words_with_letters(words, letters):
    ██████████████████████████████████████████████████████████████


def possible_words(words, pattern):
    ███████████
    ██████████████████
        █████████████████████████████
            █████████████████████████████████████
                █████████████████████████████████
                    █████
                █████████████████████████████
                    █████
            █████
                ███████████████████
    █████████████


def reverse_vowels(text):
    ███████████████████████████████████████████████████████████
    ██████████████
        █████████████████████
            █████████████████
            ████████████████████████████████████████████████████
        █████
            ███████████
    █████████████


def colour_trio(items):
    ████████████████████████████████████████
            ████████████████████████████████
            ████████████████████████████████
    ████████
    ████████████████████████████
        ███████████████
    █████████
    ████████████████████████
        █████████████████████
        ███████████████
            ███████████████████████████████
            ████████
        █████████████
    █████████████████████████████████████


def prominences(height):
    █████████████████
    ████████████████████████████████
        ██████████████████████████████████
        █████████████████████████████████████████████████
        ████████████████████████████████████████
            ███████████████
        █████████████
    ███████████
    ███████████████████████████████
        ██████████████████
            ████████████████████████
        █████
            ████████████████
            ██████████████████████████████████████████
            ██████████████
                █████████████████████████████████████
                ████████████
                    █████
                ███████████████████████████
                ██████
            █████████
            ██████████████████████
                █████████████████████████████████████████████
                ████████████
                    █████
                █████████████████████████████
                ██████
            ██████████████████████████████████████
            ████████████
                ██████████████████████████████
    █████████████


def reach_corner(x, y, n, m, aliens):
    ███████████████████████████████████████████
    ███████████████████████████████████████████████████████████████████████████████
    █████████████████████
        ██████████████████████
        █████████████████
        ███████████
            ██████████████████████████████████████████████████
                █████
            █████████████████████████████████████████████████████████
                ███████████
            ███████████
                ██████
            █████████████████
                ███████
            ███████████
                ██████
            █████████████████
                ███████
            ██████████████████████████
            ██████████
            █████████████████████████
    ████████████


def eliminate_neighbours(items):
    ██████████████
    ████████████████████
    ████████████████████

    █████████████
        ███████████
            █████████████████████████
            █████████████████████████
            █████████████

    ███████████████████████████████
        ██████████████████████████████████████
        ██████████████████████████████████████████

    ███████████████████████████
    ████████████
    █████████████████████████
        ████████████████
            █████████████
            █████████████████████
                █████████████
            █████
                █████████████
            ███████
        ████████████████
            ███████████████


def permutation_cycles(perm):
    █████████████████████████
    ██████████████████████████
        ███████████
        ██████████
            ███████████████████████
            █████████████
                █████████████████
                ██████████████
                ███████████
            ██████████████
            ███████████████████
            █████████████████████████████████
            ██████████████
                ████████████
    ███████████████████████████████████


def brangelina(first, second):
    ████████████████████████████
    ███████████████████████████████
        ████████████████
            ████████████████
                ███████████████
                ████████████████
        █████
            ████████████████
    ████████████████████
        █████████████████████████
    █████
        ██████████████████████████
    █████
    ███████████████████████████████
        ██████
    █████████████████████████


def brangelina2(first, second):
    ████████████████████████████
    ███████████████████████████
        ███████████████████████
            ████████████████
                ███████████████
                ████████████████
        █████
            ████████████████
    ████████████████████
        █████████████████████████
    █████
        ██████████████████████████
    █████
    ███████████████████████████████
        ██████
    █████████████████████████


# Return the list of possible wordomino moves in the given state.
def __wordomino_moves(state, words):
    ██████████████████████████████
    # Find the first word that starts with the given three-letter prefix.
    ██████████████████████████████
    # Advance from there over all the words that start with that prefix.
    █████████████████████████████████████████████████████
        ███████████████
        # If this word works, its last letter is a legal move from the state.
        █████████████████████████
            ██████████████████████
        ██████
    ████████████


def wordomino(state, words, really_need_lowest=True):
    ███████████████████████████████████████
    # Check if this state is a single move insta-win into a dead end.
    ██████████████████████████
        ███████████████
            # If list of moves from successor (state+c) is empty, move there to win.
            ███████████████████████████████████████████
                ████████
    # If not insta-win, or if we need the lowest winning move, find lowest winner.
    ███████████████
        ██████████████████████████████████████████
            ████████
    # No winning moves exist from this state; this state is a cold loser.
    ███████████


def squares_intersect(s1, s2):
    █████████████████
    █████████████████
    █████████████████████████████████████████████████████████████████████████


def __bulgarian_step(piles):
    ███████████████████████████████████████████████████


def bulgarian_solitaire(piles, k):
    ███████████████████████████████████████████
    █████████████████████████████████████████████████████
        ███████████████
        ███████████████████████████████
    █████████████████


def bulgarian_cycle(piles):
    ███████████████████████
    ███████████
        # Tortoise moves one step per round.
        █████████████████████████████████████
        # The hare moves two steps per round.
        ███████████████████████████████████████████████
        ██████████████████████████████
            ███████████████
            ███████████
            ████████████████████
                █████
    ███████
    █████████████# Tortoise will run the loop while hare takes a five.
        █████████████████████████████████████
        ████████
        ███████████████████████████████████████████████████████████████████
            ██████████


def count_overlapping_disks(disks):
    # Enter events for the same x-coordinate must be handled before
    # exit events, therefore 0 means enter, 1 means exit
    ███████████████████████████████████████████████████████
    ████████████████████████████████████████████████████████
    █████████████
    ████████████████████████████████
    ███████████████████████████████████
        █████████████
            ███████████████████████████
                ██████████████████████████████████████████████████
                    ██████████████████
            █████████████████████
        █████
            ████████████████████████
    ████████████████████


def spread_the_coins(coins, left, right):
    ██████████████████████████████████████████
    ██████████████████████████████████████████████████████████████████

    ████████████████████
        ████████████████████████
        ██████████████████
        ████████████████
        ██████████████████████████████████
            █████████████████████

    ████████████████████████
        ████████████████████
        ███████████████
        ███████████████████████
        ████████████
        ████████████████████████████████
        █████████████████████████████
        █████████████████████████
        ██████████████████████████
    ████████████████████████████
    ████████████████████████████
    ████████████████████████████████████████████████████
    ████████████████████████
        █████████████████████████
        ██████████
    ███████████████████████


def collatzy_distance(start, end):
    █████████
    ██████████████
    ████████████████
    ██████████████████████
        ██████████
        █████████
        ██████████████
            █████████████████████████████████████████████████████
                ████████
                █████████████████
                    ██████████████
                    ███████████
        ███████████
    ████████████


def crag_score(dice):
    ███████████
    █████████████████
    ███████████████
        █████████████████████████████████████████████████████████████
    ██████████████████████
        █████████
    ████████████████████████████████████████████████████████
        █████████
    ████████
    █████████████████████
        ███████████████████████████████████
    ███████████


def __crag_value(dice, cat):
    █████████████
    ██████████████# Crag
        ██████████████████████████████████████████████████████████
            █████████
        █████
            ████████
    ████████████████# Thirteen
        ███████████████████████████
    ████████████████# Three of a kind
        ██████████████████████████████████████
    ████████████████# Low straight
        █████████████████████████████████████
    ████████████████# High straight
        █████████████████████████████████████
    ████████████████# Odd straight
        █████████████████████████████████████
    ████████████████# Even straight
        █████████████████████████████████████
    ███████# Pip values
        ████████████████# pip value to add up
        █████████████████████████████████████████


def __crag_score_rec(rolls, limit, cats, i, to_beat):
    ██████████████████████████████████████████
        ████████
    ████████████████████████████████████████████████████████████████████
    ███████████████████████
    ████████████████████████
        ████████████████
        ████████████████████████████████████████████████████████████████
        ██████████████████████
        █████████████
        ████████████████████
            █████
    ███████████


def optimal_crag_score(rolls):
    ████████████████████████████████████████
    ███████████████████████████████████████████████████████████
    ████████████████████████████████████████████
    ███████████████████████████████████████
        ████████████████████████
    █████████████████████████████████████████████████████████████
    █████████████


def substitution_words(pattern, words):
    █████████████████████████████
    ██████████████████
        ███████████████████
            ███████████████████████████
            ███████████████████
                ████████████████████████████
                ██████████████
                    ██████████████████
                        █████
                █████
                    ███████████████
                        █████
                    █████
                        █████████████
                        █████████████
            █████
                ███████████████████
    █████████████


def __prime_code(word):
    █████
    ██████████████
        ████████████████████████████████
    ████████


def unscramble(words, word):
    ██████████████████████████████████████████████████████████████████
    █████████████████████████████████
    █████████████████████████████████████████████
    ███████████████████████████
        ████████████
        ████████████████████
        ██████████████████████████████████████████████████████████████████
            ████████████████
    █████████████


def words_with_given_shape(words, shape):
    ███████████
    ███████████████
        ████████████████████████████
            ████████
        ███████████████████████████
            ████████████████████████████████
            ███████████████████████████████
                █████
            ███████████████████████████████
                █████
            ██████████████████████████████
                █████
        █████
            ████████████████
    █████████████


def autocorrect_word(word, words, df):
    ██████████████████████
    ███████████████
        ███████████████████████
            ██████████████████████████████████████████████████
            ██████████
                ███████████████
    ███████████


def remove_after_kth(items, k=1):
    █████████████████████████
    ███████████████
        ██████████████████████
        ██████████
            ████████████████
        ███████████
    █████████████


def ztalloc(pattern):
    ████████
    ███████████████████████
        ████████████
            ███████████████
        █████
            ███████████████████████
                ███████████
            █████
                ██████████████████████
                █████████████████
                    ███████████
    ███████████


def duplicate_digit_bonus(n):
    ███████████████████████████████████████
    █████████████
        ███████████████████████████
        ████████████████████████████
        █████████████
            ██████████
        █████
            ███████████████████████████
                ███████████████████████████████████████████████████
                ████████████
            ██████████
            ██████████████████
    ████████████


def ryerson_letter_grade(n):
    ██████████
        ██████████
    ████████████
        ███████████
    ████████████
        ██████████
    ████████████
        ███████████
    ██████████████
    █████████████
    ████████████
        ████████████
    ██████████████
        ████████████
    █████
        ███████████
    ███████████████████████████████


def manhattan_skyline(towers):
    # Collect events into a list; 0 means enter, 1 means exit. We need
    # to store the building number i to distinguish between overlapping
    # active buildings with the same height.
    ███████████████████████████████████████████████████████████████
    ████████████████████████████████████████████████████████████████
    ████████████████# Sort the events in ascending x-order, entries first.
    ████████████████# Count of total area.
    ████████████████# The x-coordinate of the previous event.
    ████████████████# The active buildings currently in the sweep view.
    ████████████████# The height of the tallest active building.
    ██████████████████████████████
        # Add the area from the slab between these events. If either
        # slab width or the tallest building height is zero, this
        # product is also zero and the total area does not change.
        ████████████████████████████████████
        # Update the active set depending on what happens.
        ███████████████# Building i enters the active view.
            ██████████████████
            ████████████████████████████# May need to update tallest.
        ███████# Building i exits the active view.
            █████████████████████
            ██████████████████# Compute new tallest from scratch.
                ███████████████████████████████████████████████████████████████████
        ██████████
    █████████████████


def is_ascending(seq):
    ███████████
    █████████████
        ██████████████████████████████████
            ████████████
        ████████
    ███████████


def count_dominators(items):
    █████████████████████████
    █████████████████████████
        ██████████████████████████
            ███████████████
            ███████
    █████████████████


def arithmetic_progression(elems):
    ██████████████████████████████████████████████████████████
    ██████████
        █████████████████████
    ████████████████████
        █████████████
        ██████████████████████████████████████
            █████
        ███████████████████████
            █████████████
            ██████████████
            ██████████████████████████
                █████
                ██████████████████
                    ████████████████████
                    ██████
                    ██████████
                ███████████████████████████████
                    ████████████████████
    ███████████


def __is_word(words, word):
    ██████████████████████████████
    ███████████████████████████████████████████████████


def word_height(words, word):
    ██████████████████████████████
        ████████
    █████████████████████████████████████
    █████████████████████
        ████████████████████████████████
        ██████████████████████████████████████
        ███████████████████
            ████████████████████████████████████████
            ████████████████████
                ████████████████████████████████████████████████████
    ███████████


def max_checkers_capture(n, x, y, pieces):
    ████████
    █████████████████████████████████████████████████████████
        ███████████████████████████████████████████████
            █████████████████████████████████████████████████████████████████████████
                ███████████████████████████████
                █████████████████████████████████████████████████████████████████
                █████████████████████████████
                ████████████████████████████
    ███████████


def count_growlers(animals):
    █████████
    ██████████████████████████████████████████████████████████
        ███████████
        ████████████████████████████
            ██████████████████████████████████████████████
                ██████████
            ████████████████████████████████████████████████
    ████████████


def count_maximal_layers(points):
    ██████████████████████████████████████
    ██████████
    ██████████████████████
        ███████████
        █████████
        ████████████████████████████
            ███████████████████████████████████
                █████████████████████████████████████
                    ██████████████████████
                    █████
        ██████████████████
            █████████████
        █████
            █████████████


def line_with_most_points(points):
    █████████████████████
    ████████████████████████████████
        ██████████████
        ███████████████████████████████████
            ██████████████████████
                ██████████████
                ███████████████
                ███████████████████████████████████
                    ██████████████
                    ██████████████████████████████
                        ████████████████
                        ████████████████
                        ████████████████
                █████████████████████████████
    ███████████


def __midnight(dice, remain, sofar):
    ████████████████████
        ██████████████████████████████████
        ███████████████████████████
            ██████████████████
                █████████████████████
                █████████████
                    ██████████
                █████████████
                    ███████████
                █████████████
        ███████████████████████████████████████
    █████
        ████████
        ███████████████████████████████████
            █████████████████████████████████████
                ███████████████████████████████████████████████
                ███████████████████
                ██████████████████████████████████████████████████
                ███████████
        ███████████


def midnight(dice):
    ███████████████████████████████████████████████


def tukeys_ninthers(items):
    █████████████████████
        ████████████████████████████████████████████████████████████████████
    ███████████████


def is_perfect_power(n):
    █████
    ██████████████████
        ████████████████
        ████████████
            ████████████████
            ██████████████
                █████████
            █████
                █████
        ███████████████
            ███████████
        ██████
    ████████████


def rooks_with_friends(n, friends, enemies):
    ████████████████████████████████████████████████
    █████████████████████████████████████████
    ████████████████████████
        █████████████████████
            ██████████████████████████████████████████
            ██████████████████████████████████████
                   █████████████████████████████████████████████████████
                ████████████████
                █████████████████████████
    █████████████████████████████████████████████████████


def safe_squares_rooks(n, rooks):
    ███████████████████████████████
    ███████████████████████████████
    ████████████████████████
        ███████████████████████████████
    ██████████████████████████████████


def safe_squares_bishops(n, bishops):
    ██████████████
    ████████████████████
        ████████████████████
            █████████████████████████████
                ████████████████████████
                    ██████████████████████████████
                        █████
                █████
                    ███████████████
    █████████████████


def balanced_ternary(n, pp=None, sp=None):
    ██████████████
        █████████████████████████████
    █████████
        █████████████████████████████████████████████████
    ██████████
        █████████████
        ██████████████████
            ████████
            ███████████
    █████
        █████████████
            ████████████
            ████████████
    ████████████████
        █████████████████████████████████████████████████████████████
    █████
        ████████████████████████████████████████████████████


def __two_summers(items, goal, i=None, j=None):
    # Initialize the approaching indices, unless given.
    █████████████
        █████
    █████████████
        ██████████████████
    # Each round, one index takes one step towards the other.
    ████████████
        ███████████████████████
        █████████████
            ███████████
        ██████████████
            ██████
        █████
            ██████
    ████████████


# With __two_summers, finding three summers is now just one loop.

def three_summers(items, goal):
    █████████████████████████████
        ████████████████████████████████████████████████
            ███████████
    ████████████


def count_divisibles_in_range(start, end, n):
    █████████████████████
    ████████████████████
        █████████████████████████████████████████
    ███████████
        █████████████████████████████████████████████████████████████████████████████
    █████
        █████████████
            ████████████████
        ██████████
        █████████
            ██████
        █████
            █████████████████████
    █████████


def lattice_paths(x, y, tabu):
    ██████████████████
        ████████
    ██████████████████████████████████████████████████████████████
    ████████████████████
    ███████████████████████
        ███████████████████████
            ███████████████████████████████████████████████
                ███████████████████████████████████████████████
                ███████████████████████████████████████████████
                ████████████████████████████████
    ███████████████████████


def winning_card(cards, trump=None):
    █████████████████
    ███████████████████████
        █████████████████
        ███████████████████████████████████████████
            █████████████
        ██████████████████████████████████████████████████████████████████████████████████
            █████████████
    █████████████


def oware_move(board, pos):
    ██████████████████████████████████████
    ████████████████
    ██████████████
    ██████████████
        ███████████████████
        ███████████████
            ███████████████
            ████████
    ████████████████████████████████████████████
        ██████████████████████
        ██████████████
        ███████████████████
    ████████████


def __lunar_add(a, b):
    ██████████
        ████████
    ████████████
        ████████
    █████
        ███████████████████████████████████████████████████████████████


def __sd_mul(a, b):
    ██████████
        ████████
    █████
        █████████████████████████████████████████████████


def lunar_multiply(a, b):
    ██████████
        ████████
    █████
        ████████████████████████████████████████████████████████████████████████


def __cookie(piles, dl, bl):
    ██████████
        ███████████
    ██████████████
    ██████████
        █████████████████
    ███████████████████████████████████████████████████████████████████
    █████████████████████████████████████████████████████████
        █████████████████████████████████████████████████████
        ████████████████████████████████████████████████████████
        ██████████████████████████████████████
        ████████████████████
            █████████████████
    ███████████


def cookie(piles):
    ████████████████████████████████████████████████████████
    ████████████████████████████████
        ████████
        ███████████████████████████████████
            ███████████████████
            ████████████████████████████████
            ██████████
                ████████████████████████
                █████
    ████████████████


def scylla_or_charybdis(seq, n):
    ██████████████████████████████
    █████████████████████████
        ██████████████████████
        ███████████████████████
            ███████████████
            ████████████████████████████
            █████████████████
                █████████████████████████████████████
                    ███████████████████████████
                █████
        ██████
    ████████████


def counting_series(n):
    ████████████████████████
    █████████████
        ██████
        ██████
        ██████████
        ███████
    ███████
    ██████████████████████████████████████████████


def taxi_zum_zum(moves):
    ████████████████████████████████████████████████████████████
    ███████████████
        ████████████
            ███████████████████
        ██████████████
            ███████████████████
        █████
            ████████████████████████████████████████████████
    ██████████


def is_left_handed(pips):
    # How many sides need to be mirrored to get to 123?
    ██████████████████████████████████████████
    # Mirror the sides that are not 123.
    ████████████████████████████████████████████
    # Is the resulting die clockwise?
    ████████████████████████████████████████████████
    # Flip the result if needed.
    █████████████████████████████████████


def group_and_skip(n, a, b=1):
    ███████████
    ████████████
        ██████████
        ████████████████████
        █████████
    █████████████


def trips_fill(words, pat, tabu):
    ████████████████
        ██████████
    █████████████████
        ██████████████████████████
    ███████████████████
        ███████████
        ██████████████████████████████
        ██████████████████████████████████████████
    █████
        ███████████████████████████████████
        ███████████████
        ██████████████████████████████████████████████████████████
            ████████
    ██████████████████████
        ███████████████████████████
            ████████████
            █████████████████
                ████████████████████████████████████
                ████████████████████████████████████
                ████████████████████████████████████
                ████████████████████
                    ██████████████
                    ████████████████████████████████████████████████
                    ██████████
                    ████████
                        ██████████████████


def mcculloch(digits):
    ███████████████████
        ██████████████████████████████████
        ███████████████
            ███████████
        █████████████████
            ███████████████████████
            █████████
                ███████████████
                    █████████████████████████
                █████████████████
                    ██████████████████
                █████████████████
                    ████████████████████████


def __canonize(ranks_):
    ████████████████████████████████████████████████████████████████████████████


def bridge_hand_shorthand(hand):
    ███████████████████████████████████████████████████████████████████████████████
    ██████████████████████████████████████████████████████████████
    ████████████████████


def losing_trick_count(hand):
    █████████████████████████████████████████████████████
    ███████████████████████████████████████████████████████████████████████


def knight_jump(steps, start, end):
    ██████████████████████████████████████████████████████████████████████████
    ██████████████████████████████


def __sdc_rec(n, k):
    ██████████
        █████████
    ██████████████████
        ███████████
    █████
    █████████████████
        ██████
    █████████████
        ██████████████████████████████████
        ███████████████████
            ████████████████
        ██████
    ███████████


def sum_of_distinct_cubes(n):
    █████
    █████████████████
        ██████
    ██████████████████████


def wythoff_array(n):
    █████████████# First two elements of the previous row.
    ██████████# The smallest positive integer not yet seen.
    ██████████████# Integers > upto that we have already seen.
    ████████████████████# Row number that is being generated.
        ████████████# First two elements of the first row.
            █████████████
        ███████# First two elements of the next row.
            █████████
            ██████████████████████████████████████████████
        # Initialize the state variables for the current row.
        ██████████████████████████████████
        # Generate elements in the current row up to n.
        ██████████████
            █████████████# Found what we are looking for
                ███████████
            # Update the set of integers that we have seen.
            ████████████
            # Release the elements less than the smallest unseen.
            ███████████████████
                █████████████████
                █████████
            # Move one step to the right in the current row.
            ██████████████████████████████


def pyramid_blocks(n, m, h):
    █████████████████████████████████████████████████████████████████████


def count_and_say(digits):
    ██████████████████████████████████████
    ██████████████████████████████
        █████████████
            ████████████████
        █████
            ███████████████
                ██████████████████████████
                ██████████████
            ████████
            ███████████████
    █████████████


def is_cyclops(n):
    ███████████████████████████████
    ████████████████████████████████████████████████████████████████████████████████████████


def milton_work_point_count(hand, trump='notrump'):
    ███████████████████████████████████████████████████████████████
    █████████████████████████
        ████████████████████████████
    ███████████████████████████████
    ███████████████████████████████████████
        ██████████
    ██████████████████████████████████████████████████████████████
    ██████████████████████
        ██████████████████
            ████████████████████████████████████████
                █████████████████████████
    ██████████████████
        █████████████████
            ██████████
        ███████████████████
            ██████████
        ███████████████████
            ██████████
    ████████████


def __dominated(p1, p2):
    ██████████████████████████████████████


def __cross(x1, y1, x2, y2, x3, y3):
    ████████████████████████████████████████████████████


def __collinear(x1, y1, x2, y2, x3, y3):
    ███████████████████████████████████████████


def sum_of_two_squares(n):
    ███████████
    ██████████████
        ██████
    █████████████
        █████████████
        ██████████
            ███████████
        ███████████
            ██████
        █████
            ██████
    ███████████


def count_squares(points):
    █████████████████████████████
    ████████████████████████████████████
    ████████████████████████████████████
    █████████████████████
        █████████████████████████████████
            █████████████████████████████████
                ████████████████████████████
                ████████████████████████████
                ██████████████████████████████████████
                ████████████████████
                    ████████████
    ██████████████


def only_odd_digits(n):
    ██████████████████████████████████████████████


def __expand_primes(n):
    # Start looking for new primes after the largest prime we know.
    ████████████████████
    ███████████████████████
        █████████████████
            ██████████████████
        ██████


def __is_prime(n):
    # To check whether n is prime, check its divisibility with
    # all known prime numbers up to the square root of n.
    # First ensure that we have enough primes to do the test.
    ██████████████████████████
        ████████████████████████████████████

    ██████████████████
        ██████████████
            ████████████
        █████████████
            ███████████
    ███████████


def __f_sum(n, i, factors):
    █████████████████
        ██████████████
            ███████████
    █████████████████████
        ████████████
    ██████████████
    ██████████████
        ███████████
    █████████
        ████████████
    █████
        ███████████████████████████████████████████████████████████


def balanced_centrifuge(n, k):
    ████████████
    ██████████████████
    ██████████████████
        ██████████████
            █████████████████
        █████████
            █████
    ██████████████████████████████████████████████████████████


def fibonacci_word(k):
    █████████████████████
        ██████████████████████████████████████
    ███████████████████
    ████████████
        ██████████████████████
            █████████████████████
        █████████
    █████████████


def can_balance(items):
    ██████████████████████████████
        █████████████████████████████████████████████████████
        ███████████████████████████████████████████████████████████████████
        █████████████████
            ████████
    █████████


def postfix_evaluate(items):
    ██████████
    ██████████████████
        █████████████████████
            ████████████████
            ████████████████
            ███████████████
                █████████████████████
            █████████████████
                █████████████████████
            █████████████████
                █████████████████████
            █████████████████
                ███████████
                    ██████████████████████
                █████
                    ███████████████
        █████
            ██████████████████
    ███████████████


def give_change(amount, coins):
    ███████████████████
    ██████████████████
    ███████████
    █████████████████
        ██████████████████
            ██████████████
            ███████████████████
        █████
            ██████████████████
    █████████████


def nearest_polygonal_number(n, s):
    ██████████████
        ████████████████████████████████████████

    ███████████
    ███████████████████
        ████████████████
    ████████████████
        ████████████████
        ████████████
        █████████
            █████
        █████
            █████
    ███████████████████████████
    █████████████████████████████████
    █████████████████████████████


def hitting_integer_powers(a, b, t=100):
    ███████████████████████████
    █████████████████████████████████████
        ███████████
            ███████████
            ███████
        █████
            ███████████
            ███████
    █████████████


def __frog1d(x1, d1, x2, d2):
    ███████████
        ███████████████████████████████████
    ████████████████████████
    ███████████████
        ███████████
    ██████████
        █████████████████████████████
    █████████████████████████████████████████████████████


def frog_collision_time(frog1, frog2):
    ██████████████████████████
    ██████████████████████████
    ███████████████████████████████
    ██████████████████
        ███████████████████████████████
        ██████████████████
            ██████████████████████
                ████████████████████
            █████
                █████████████████████████████████
            ████████████████████████████████████████████████


def subtract_square(queries):
    ████████████████████████████████████████
    █████████████████████
        ████████████████
        ████████
    █████████████████████
        ███████████████████
        ████████
    ████████
    █████████████████████████
        █████
        ████████████████████
            ██████████████████████████
                █████████████████
                █████
            ██████
        █████
            ██████████████████
        ████████████████████████
            ███████████████████████
            ████████
        █████████
    █████████████


def calkin_wilf(n):
    █████████████████
    ████████████████████████
    ████████████
        ███████████████
        █████████████████████████████████████
        ██████████████████████████████████
        ██████████████████████████████████
        ██████
    ███████████████████


def __no_repeated_digits(n):
    ██████████████████████████████
           ███████████████████████████████████████████████████████


def __consistent(n, m, bulls, cows):
    ███████████████████████████████████
    ██████████████████████████
        ████████████
            ███████
        █████████████
            ███████
    █████████████████████████████████


def bulls_and_cows(guesses):
    █████████████████████████████████████████████████████████████████████
    ████████████████████████████████████
        ███████████████████████████████
                    ███████████████████████████████████████
    ███████████████


def count_consecutive_summers(n):
    █████████████████████████████████████
    █████████████
        █████████████
            █████████████████
        █████████████
            ██████
            █████████
        █████
            █████████
            ██████
            █████████
                █████
    ███████████████████


def domino_cycle(tiles):
    ████████████████████████████████████████████
    ██████████████████
        ██████████████████████
            ████████████
        ███████████
    ███████████


def van_eck(n):
    ██████████████████████
    ███████████████████████
        ████████████████████
            ████████████████
            ████████
        █████
            █████████████████
            ████████████████
            ███████████████
    ███████████
